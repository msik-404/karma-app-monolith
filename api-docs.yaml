openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /user/users:
    put:
      tags:
      - user-controller
      summary: Update user account of currently logged-in user.
      description: |
        Update user account of currently logged-in user. Only sub-set of all fields can be updated with this endpoint.
        These fields contain every field which is safe to be changed by regular user.
      operationId: updateWithUserPrivilege
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequestWithUserPrivilege'
        required: true
      responses:
        "409":
          description: At least one set field which should be unique is not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "400":
          description: Zero fields were set in update object. At least single filed
            should be set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "404":
          description: Requested User was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: User account was updated successfully.
      security:
      - Bearer Authentication: []
  /admin/users/{userId}:
    put:
      tags:
      - user-controller
      summary: Update user account with admin privilege.
      description: Update user account with admin privilege. This endpoint requires
        at least admin privilege. All users accounts and all fields can be modified
        with this endpoint.
      operationId: updateWithAdminPrivilege
      parameters:
      - name: userId
        in: path
        description: Id of the user on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequestWithAdminPrivilegeDoc'
        required: true
      responses:
        "409":
          description: At least one set field which should be unique is not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "400":
          description: Zero fields were set in update object. At least single filed
            should be set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "404":
          description: Requested User was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: User account was updated successfully.
      security:
      - Bearer Authentication: []
  /user/posts:
    get:
      tags:
      - post-controller
      summary: "Get key-set (karma_score, post_id) paginated posts. Each post was\
        \ created by currently logged-in user."
      description: |
        Get key-set (karma_score, post_id) paginated posts. Each post was created by currently logged-in user. If two posts karma_scores are the same, post with greater post_id is first. If pagination is not set top
        posts are returned.
      operationId: findPaginatedOwnedPosts
      parameters:
      - name: size
        in: query
        description: |
          Amount of posts to be returned. If there are less posts than requested, as many posts as possible are
          returned.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: active
        in: query
        description: "Post visibility, makes returned post have active visibility.\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: hidden
        in: query
        description: "Post visibility, makes returned post have hidden visibility\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: post_id
        in: query
        description: |
          Id of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: karma_score
        in: query
        description: |
          Score of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Could not get posts from the database for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Returned paginated posts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
      security:
      - Bearer Authentication: []
    post:
      tags:
      - post-controller
      summary: Create new post.
      description: Create new post. User needs to be logged-in.
      operationId: create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - postCreationRequest
              type: object
              properties:
                postCreationRequest:
                  $ref: '#/components/schemas/PostCreationRequest'
                image:
                  type: string
                  description: Binary data of an image. Should be uploaded as a file.
                  format: binary
      responses:
        "500":
          description: File could not be processed for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Post was created successfully.
      security:
      - Bearer Authentication: []
  /user/posts/{postId}/unrate:
    post:
      tags:
      - post-controller
      summary: Unrate existing post.
      description: |-
        Unrate existing post. User needs to be logged-in. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
         If post was not rated in the first place, this operation does not do anything.
      operationId: unrate
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Post was unrated successfully.
        "500":
          description: Could not unrate post for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /user/posts/{postId}/unhide:
    post:
      tags:
      - post-controller
      summary: Change owned post's visibility from hidden to active
      description: |
        Change owned post's visibility from hidden to active User needs to be logged-in. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
      operationId: unhideByUser
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Could not change visibility of the post for some reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "401":
          description: Could not change visibility of the post because of not sufficient
            privilege or not being the owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Post was activated successfully.
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /user/posts/{postId}/rate:
    post:
      tags:
      - post-controller
      summary: Rate existing post.
      description: |
        Rate existing post. User needs to be logged-in. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
         User can change his rating decision from positive to negative or the other way around, and post's score
        will get updated accordingly.
      operationId: rate
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      - name: is_positive
        in: query
        description: Indicates whether post rating is positive or negative.
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Post was rated successfully.
        "500":
          description: Could not rate post for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /user/posts/{postId}/hide:
    post:
      tags:
      - post-controller
      summary: Change owned post's visibility from active to hidden.
      description: |
        Change owned post's visibility from active to hidden. User needs to be logged-in. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
      operationId: hideByUser
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Post was hidden successfully.
        "500":
          description: Could not change visibility of the post for some reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "401":
          description: Could not change visibility of the post because of not sufficient
            privilege or not being the owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /user/posts/{postId}/delete:
    post:
      tags:
      - post-controller
      summary: Change owned post's visibility from any to deleted.
      description: |
        Change owned post's visibility from any to deleted. User needs to be logged-in. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
      operationId: deleteByUser
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Could not change visibility of the post for some reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "401":
          description: Could not change visibility of the post because of not sufficient
            privilege or not being the owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Post was deleted successfully.
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /register:
    post:
      tags:
      - auth-controller
      summary: Create new user account.
      description: Create new user account.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "409":
          description: At least one set field which should be unique is not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: User account was registered successfully.
  /mod/posts/{postId}/hide:
    post:
      tags:
      - post-controller
      summary: Change post's visibility from active to hidden.
      description: |
        Change post's visibility from active to hidden. User needs to be logged-in. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
      operationId: hideByMod
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Post was hidden successfully.
        "500":
          description: Could not change visibility of the post for some reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "401":
          description: Could not change visibility of the post because of not sufficient
            privilege or not being the owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /login:
    post:
      tags:
      - auth-controller
      summary: Login and get JWT.
      description: |
        Used for login. Returns JWT string which should be set in Authorization header in the form of bearer token.
        If Authorization header is not set, user is considered to not be logged-in.
        Bearer: JWT_STRING
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "409":
          description: At least one set field which should be unique is not.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: |
            User logged-in successfully. JWT string is returned. Authorization header should be set with string:
            "Bearer JWT_STRING" for the user to be considered logged-in. JWT is signed with sha256 and is valid for one
            hour. JWT has user's id encoded as subject.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /admin/posts/{postId}/delete:
    post:
      tags:
      - post-controller
      summary: Change post's visibility from any to deleted.
      description: |
        Change post's visibility from any to deleted. This endpoint requires at least admin privilege. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
      operationId: deleteByAdmin
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Could not change visibility of the post for some reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "401":
          description: Could not change visibility of the post because of not sufficient
            privilege or not being the owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Post was deleted successfully.
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /admin/posts/{postId}/activate:
    post:
      tags:
      - post-controller
      summary: Change post's visibility from any to active.
      description: |
        Change post's visibility from any to active. This endpoint requires at least admin privilege. This operation is idempotent. When client performs it for the first time it is persisted. Performing it
        consecutively for the second time does not do anything.
      operationId: activateByAdmin
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "500":
          description: Could not change visibility of the post for some reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "401":
          description: Could not change visibility of the post because of not sufficient
            privilege or not being the owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Post was deleted successfully.
        "404":
          description: Post with that id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
      security:
      - Bearer Authentication: []
  /user/posts/ratings:
    get:
      tags:
      - post-controller
      summary: "Get key-set (karma_score, post_id) paginated posts ratings of currently\
        \ logged-in user."
      description: |
        Get key-set (karma_score, post_id) paginated posts ratings of currently logged-in user.Post ratings can be returned in the same way as posts. This endpoint can be used with endpoints for
        returning paginated posts, to show to the user which posts have been rated by him and in what way (positive/
        negative).
         If two posts karma_scores are the same, post rating of post with greater post_id is first. If pagination
        is not set post ratings of top posts are returned.
      operationId: findPersonalPostRatings
      parameters:
      - name: size
        in: query
        description: |
          Amount of posts to be returned. If there are less posts than requested, as many posts as possible are
          returned.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: post_id
        in: query
        description: |
          Id of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: karma_score
        in: query
        description: |
          Score of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        description: |
          Creator user's username, makes endpoint return only these posts whose creator has this username.
          Can be omitted, to not filter by username.
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Could not get posts ratings from the database for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Returned paginated posts ratings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRatingResponse'
      security:
      - Bearer Authentication: []
  /mod/posts:
    get:
      tags:
      - post-controller
      summary: "Get key-set (karma_score, post_id) paginated posts. This endpoint\
        \ requires at least mod privilege."
      description: "Get key-set (karma_score, post_id) paginated posts. This endpoint\
        \ requires at least mod privilege. Active and hidden posts can be returned."
      operationId: findPaginatedPostsForMod
      parameters:
      - name: size
        in: query
        description: |
          Amount of posts to be returned. If there are less posts than requested, as many posts as possible are
          returned.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: active
        in: query
        description: "Post visibility, makes returned post have active visibility.\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: hidden
        in: query
        description: "Post visibility, makes returned post have hidden visibility\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: post_id
        in: query
        description: |
          Id of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: karma_score
        in: query
        description: |
          Score of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        description: |
          Creator user's username, makes endpoint return only these posts whose creator has this username.
          Can be omitted, to not filter by username.
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Could not get posts from the database for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Returned paginated posts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
      security:
      - Bearer Authentication: []
  /mod/posts/ratings:
    get:
      tags:
      - post-controller
      summary: "Get key-set (karma_score, post_id) paginated posts ratings of currently\
        \ logged-in user. This endpoint requires at least mod privilege."
      description: "Get key-set (karma_score, post_id) paginated posts ratings of\
        \ currently logged-in user. This endpoint requires at least mod privilege.\
        \ Posts ratings of active and hidden posts can be returned."
      operationId: findPersonalPostRatingsForMod
      parameters:
      - name: size
        in: query
        description: |
          Amount of posts to be returned. If there are less posts than requested, as many posts as possible are
          returned.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: active
        in: query
        description: "Post visibility, makes returned post have active visibility.\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: hidden
        in: query
        description: "Post visibility, makes returned post have hidden visibility\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: post_id
        in: query
        description: |
          Id of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: karma_score
        in: query
        description: |
          Score of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        description: |
          Creator user's username, makes endpoint return only these posts whose creator has this username.
          Can be omitted, to not filter by username.
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Could not get posts ratings from the database for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Returned paginated posts ratings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRatingResponse'
      security:
      - Bearer Authentication: []
  /guest/posts:
    get:
      tags:
      - post-controller
      summary: "Get key-set (karma_score, post_id) paginated posts."
      description: |-
        Get key-set (karma_score, post_id) paginated posts. If two posts karma_scores are the same, post with greater post_id is first. If pagination is not set top
        posts are returned.
        User does not need to be logged-in to use this endpoint. Active posts can be returned.
      operationId: findPaginatedPosts
      parameters:
      - name: size
        in: query
        description: |
          Amount of posts to be returned. If there are less posts than requested, as many posts as possible are
          returned.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: post_id
        in: query
        description: |
          Id of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: karma_score
        in: query
        description: |
          Score of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        description: |
          Creator user's username, makes endpoint return only these posts whose creator has this username.
          Can be omitted, to not filter by username.
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Could not get posts from the database for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Returned paginated posts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
  /guest/posts/{postId}/image:
    get:
      tags:
      - post-controller
      summary: Get image by post id.
      description: Get image by post id.User does not need to be logged-in to use
        this endpoint.
      operationId: findImageById
      parameters:
      - name: postId
        in: path
        description: Id of the post on which specified operation is being performed.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returned post's image data
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "404":
          description: Requested image was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /admin/posts:
    get:
      tags:
      - post-controller
      summary: "Get key-set (karma_score, post_id) paginated posts. This endpoint\
        \ requires at least admin privilege."
      description: "Get key-set (karma_score, post_id) paginated posts. This endpoint\
        \ requires at least admin privilege. Active, hidden and deleted posts can\
        \ be returned."
      operationId: findPaginatedPostsForAdmin
      parameters:
      - name: size
        in: query
        description: |
          Amount of posts to be returned. If there are less posts than requested, as many posts as possible are
          returned.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: active
        in: query
        description: "Post visibility, makes returned post have active visibility.\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: hidden
        in: query
        description: "Post visibility, makes returned post have hidden visibility\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: deleted
        in: query
        description: "Post visibility, makes returned post have deleted visibility\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: post_id
        in: query
        description: |
          Id of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: karma_score
        in: query
        description: |
          Score of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        description: |
          Creator user's username, makes endpoint return only these posts whose creator has this username.
          Can be omitted, to not filter by username.
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Could not get posts from the database for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Returned paginated posts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
      security:
      - Bearer Authentication: []
  /admin/posts/ratings:
    get:
      tags:
      - post-controller
      summary: "Get key-set (karma_score, post_id) paginated posts ratings of currently\
        \ logged-in user. This endpoint requires at least admin privilege."
      description: "Get key-set (karma_score, post_id) paginated posts ratings of\
        \ currently logged-in user. This endpoint requires at least admin privilege.\
        \ Posts ratings of active, hidden and deleted posts can be returned."
      operationId: findPersonalPostRatingsForAdmin
      parameters:
      - name: size
        in: query
        description: |
          Amount of posts to be returned. If there are less posts than requested, as many posts as possible are
          returned.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: active
        in: query
        description: "Post visibility, makes returned post have active visibility.\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: hidden
        in: query
        description: "Post visibility, makes returned post have hidden visibility\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: deleted
        in: query
        description: "Post visibility, makes returned post have deleted visibility\
          \ At the same time other visibilities can also be selected."
        required: false
        schema:
          type: boolean
          default: false
      - name: post_id
        in: query
        description: |
          Id of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: karma_score
        in: query
        description: |
          Score of the last returned post. Used for pagination. Pagination to work requires both karma_score and post_id to be set, otherwise top
          posts are returned.
        required: false
        schema:
          type: integer
          format: int64
      - name: username
        in: query
        description: |
          Creator user's username, makes endpoint return only these posts whose creator has this username.
          Can be omitted, to not filter by username.
        required: false
        schema:
          type: string
      responses:
        "500":
          description: Could not get posts ratings from the database for some reason.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        "200":
          description: Returned paginated posts ratings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostRatingResponse'
      security:
      - Bearer Authentication: []
components:
  schemas:
    UserUpdateRequestWithUserPrivilege:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
      description: |
        Json with data for performing user update. Each field is optional, only set fields will be used for update.
        This objects contains fields which are safe to be modified with user privilege.
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri
        properties:
          type: object
          additionalProperties:
            type: object
    UserUpdateRequestWithAdminPrivilegeDoc:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
          - ADMIN
          - MOD
          - USER
      description: |
        Json with data for performing user update. Each field is optional, only set fields will be used for update.
        This objects contains fields which can be modified with user and admin privilege, thus to use it, one must
        have admin privilege.
    PostCreationRequest:
      required:
      - headline
      - text
      type: object
      properties:
        headline:
          type: string
        text:
          type: string
      description: Json with data for creating new post.
    RegisterRequest:
      required:
      - email
      - password
      - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      description: Json with data for creating new user account.
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      description: Json with data for logging-in.
    LoginResponse:
      required:
      - jwt
      type: object
      properties:
        jwt:
          type: string
    PostResponse:
      required:
      - username
      - visibility
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        headline:
          type: string
        text:
          type: string
        karmaScore:
          type: integer
          format: int64
        visibility:
          type: string
          enum:
          - ACTIVE
          - HIDDEN
          - DELETED
    PostRatingResponse:
      required:
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        wasRatedPositively:
          type: boolean
  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
